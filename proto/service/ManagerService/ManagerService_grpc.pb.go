// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ManagerService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ManagerServiceClient is the client API for ManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagerServiceClient interface {
	//合同相关
	ListContract(ctx context.Context, in *ContractListReq, opts ...grpc.CallOption) (*ContractListResp, error)
	ListMiContract(ctx context.Context, in *ContractMiListReq, opts ...grpc.CallOption) (*ContractMiListResp, error)
	CreateOneContractMI(ctx context.Context, in *CreateOneContractMIReq, opts ...grpc.CallOption) (*CreateOneContractMIResp, error)
	UpdateOneContractMI(ctx context.Context, in *UpdateOneContractMIReq, opts ...grpc.CallOption) (*UpdateOneContractMIResp, error)
	UpdateOneContract(ctx context.Context, in *UpdateOneContractReq, opts ...grpc.CallOption) (*UpdateOneContractResp, error)
	UpdateBatchContract(ctx context.Context, in *UpdateBatchContractReq, opts ...grpc.CallOption) (*UpdateBatchContractResp, error)
	CreateBatchContract(ctx context.Context, in *CreateBatchContractReq, opts ...grpc.CallOption) (*CreateBatchContractResp, error)
	UpdateContractActive(ctx context.Context, in *UpdateContractActiveReq, opts ...grpc.CallOption) (*UpdateContractActiveResp, error)
	DeleteOneContract(ctx context.Context, in *DeleteOneContractReq, opts ...grpc.CallOption) (*DeleteOneContractResp, error)
	DeleteOneContractMi(ctx context.Context, in *DeleteOneContractMiReq, opts ...grpc.CallOption) (*DeleteOneContractMiResp, error)
	GetContractInfo(ctx context.Context, in *GetContractInfoReq, opts ...grpc.CallOption) (*GetContractInfoResp, error)
	ContractDetail(ctx context.Context, in *ContractDetailReq, opts ...grpc.CallOption) (*ContractDetailResp, error)
	CheckContractList(ctx context.Context, in *UpCheckContractReq, opts ...grpc.CallOption) (*CheckContractListResp, error)
	//药品相关
	ListMedicine(ctx context.Context, in *MedicineListReq, opts ...grpc.CallOption) (*MedicineListResp, error)
	MedicineListForQuery(ctx context.Context, in *MedicineListForQueryReq, opts ...grpc.CallOption) (*MedicineListForQueryResp, error)
	CreateMedicine(ctx context.Context, in *CreateMedicineReq, opts ...grpc.CallOption) (*CreateMedicineResp, error)
	CreateBatchMedicine(ctx context.Context, in *CreateBatchMedicineReq, opts ...grpc.CallOption) (*CreateBatchMedicineResp, error)
	UpdateMedicine(ctx context.Context, in *UpdateMedicineReq, opts ...grpc.CallOption) (*UpdateMedicineResp, error)
	UpdateMedicineActive(ctx context.Context, in *UpdateMedicineActiveReq, opts ...grpc.CallOption) (*UpdateMedicineActiveResp, error)
	DeleteMedicine(ctx context.Context, in *DeleteMedicineReq, opts ...grpc.CallOption) (*DeleteMedicineResp, error)
	SelectTagByMedicineId(ctx context.Context, in *SelectTagByMedicineIdReq, opts ...grpc.CallOption) (*SelectTagByMedicineIdResp, error)
	SelectInfoByMedicineNames(ctx context.Context, in *SelectInfoByMedicineNamesReq, opts ...grpc.CallOption) (*SelectInfoByMedicineNamesResp, error)
	//药品标签相关
	TagList(ctx context.Context, in *TagListReq, opts ...grpc.CallOption) (*TagListResp, error)
	CreateTag(ctx context.Context, in *CreateTagReq, opts ...grpc.CallOption) (*CreateTagResp, error)
	UpdateTag(ctx context.Context, in *UpdateTagReq, opts ...grpc.CallOption) (*UpdateTagResp, error)
	DeleteTag(ctx context.Context, in *DeleteTagReq, opts ...grpc.CallOption) (*DeleteTagResp, error)
	TagDetailList(ctx context.Context, in *TagDetailListReq, opts ...grpc.CallOption) (*TagDetailListResp, error)
	DeleteTagMedicine(ctx context.Context, in *DeleteTagMedicineReq, opts ...grpc.CallOption) (*DeleteTagMedicineResp, error)
	CreateTagMedicine(ctx context.Context, in *CreateTagMedicineReq, opts ...grpc.CallOption) (*CreateTagMedicineResp, error)
	//医疗机构相关
	ListMi(ctx context.Context, in *ListMiReq, opts ...grpc.CallOption) (*ListMiResp, error)
	CommonMI(ctx context.Context, in *CommonMIReq, opts ...grpc.CallOption) (*CommonMIResp, error)
	CreateOneMI(ctx context.Context, in *CreateOneMIReq, opts ...grpc.CallOption) (*CreateOneMIResp, error)
	UpdateMi(ctx context.Context, in *UpdateMiReq, opts ...grpc.CallOption) (*UpdateMiResp, error)
	//配送企业相关
	ListCompany(ctx context.Context, in *ListCompanyReq, opts ...grpc.CallOption) (*ListCompanyResp, error)
	CreateOneCompany(ctx context.Context, in *CreateOneCompanyReq, opts ...grpc.CallOption) (*CreateOneCompanyResp, error)
	UpdateOneCompany(ctx context.Context, in *UpdateOneCompanyReq, opts ...grpc.CallOption) (*UpdateOneCompanyResp, error)
	CommonCompany(ctx context.Context, in *CommonCompanyReq, opts ...grpc.CallOption) (*CommonCompanyResp, error)
	SelCompanyByNames(ctx context.Context, in *SelCompanyByNamesReq, opts ...grpc.CallOption) (*SelCompanyByNamesResp, error)
	//招采异常订单相关
	ListTpPlanErr(ctx context.Context, in *ListTpPlanErrReq, opts ...grpc.CallOption) (*ListTpPlanErrResp, error)
	UpdateErrShipmentPlan(ctx context.Context, in *UpdateErrShipmentPlanReq, opts ...grpc.CallOption) (*UpdateErrShipmentPlanResp, error)
	//招采单(配送)相关
	ListShipmentPlan(ctx context.Context, in *ListShipmentPlanReq, opts ...grpc.CallOption) (*ListShipmentPlanResp, error)
	CountShipmentPlan(ctx context.Context, in *CountShipmentPlanReq, opts ...grpc.CallOption) (*CountShipmentPlanResp, error)
	//配送单详情
	DetailShipmentOrder(ctx context.Context, in *DetailShipmentOrderReq, opts ...grpc.CallOption) (*DetailShipmentOrderResp, error)
	ListShipmentPlanForOrder(ctx context.Context, in *ListShipmentPlanForOrderReq, opts ...grpc.CallOption) (*ListShipmentPlanForOrderResp, error)
	//配送单创建
	CreateShipmentOrder(ctx context.Context, in *CreateShipmentOrderReq, opts ...grpc.CallOption) (*CreateShipmentOrderResp, error)
	//配送单列表
	ListShipmentOrder(ctx context.Context, in *ListShipmentOrderReq, opts ...grpc.CallOption) (*ListShipmentOrderResp, error)
	//配送单表头汇总
	CountShipmentOrder(ctx context.Context, in *CountShipmentOrderReq, opts ...grpc.CallOption) (*CountShipmentOrderResp, error)
	//配送单修改
	UpdateShipmentOrder(ctx context.Context, in *UpdateShipmentOrderReq, opts ...grpc.CallOption) (*UpdateShipmentOrderResp, error)
	//hash模块
	GetCompanyHash(ctx context.Context, in *GetCompanyHashReq, opts ...grpc.CallOption) (*GetCompanyHashResp, error)
	GetMiHash(ctx context.Context, in *GetMiHashReq, opts ...grpc.CallOption) (*GetMiHashResp, error)
	GetMedicineHash(ctx context.Context, in *GetMedicineReq, opts ...grpc.CallOption) (*GetMedicineResp, error)
	GetContractHash(ctx context.Context, in *GetContractHashReq, opts ...grpc.CallOption) (*GetContractHashResp, error)
	GetContractMiHash(ctx context.Context, in *GetContractMiHashReq, opts ...grpc.CallOption) (*GetContractMiHashResp, error)
	GetConfigHash(ctx context.Context, in *GetConfigHashReq, opts ...grpc.CallOption) (*GetConfigHashResp, error)
	GetShipmentPlanHash(ctx context.Context, in *GetShipmentPlanHashReq, opts ...grpc.CallOption) (*GetShipmentPlanHashResp, error)
	GetShipmentOrderHash(ctx context.Context, in *GetShipmentOrderHashReq, opts ...grpc.CallOption) (*GetShipmentOrderHashResp, error)
	GetShipmentPayHash(ctx context.Context, in *GetShipmentPayHashReq, opts ...grpc.CallOption) (*GetShipmentPayHashResp, error)
	GetShipmentFactoringHash(ctx context.Context, in *GetShipmentFactoringHashReq, opts ...grpc.CallOption) (*GetShipmentFactoringHashResp, error)
	//根据哈希查询证书内容
	GetHashContent(ctx context.Context, in *GetHashContentReq, opts ...grpc.CallOption) (*GetHashContentResp, error)
	//通用配置查询
	GetConfig(ctx context.Context, in *GetConfigReq, opts ...grpc.CallOption) (*GetConfigResp, error)
	//修改配置
	UpdateConfig(ctx context.Context, in *UpdateConfigReq, opts ...grpc.CallOption) (*UpdateConfigResp, error)
	//批量插入配置
	InsertConfigs(ctx context.Context, in *InsertConfigsReq, opts ...grpc.CallOption) (*InsertConfigsResp, error)
	//医院专户额度
	GetMiSpecialConfig(ctx context.Context, in *GetMiSpecialConfigReq, opts ...grpc.CallOption) (*GetMiSpecialConfigResp, error)
	UpdateMiSpecialConfig(ctx context.Context, in *UpdateMiSpecialConfigReq, opts ...grpc.CallOption) (*UpdateMiSpecialConfigResp, error)
}

type managerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewManagerServiceClient(cc grpc.ClientConnInterface) ManagerServiceClient {
	return &managerServiceClient{cc}
}

func (c *managerServiceClient) ListContract(ctx context.Context, in *ContractListReq, opts ...grpc.CallOption) (*ContractListResp, error) {
	out := new(ContractListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListMiContract(ctx context.Context, in *ContractMiListReq, opts ...grpc.CallOption) (*ContractMiListResp, error) {
	out := new(ContractMiListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListMiContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateOneContractMI(ctx context.Context, in *CreateOneContractMIReq, opts ...grpc.CallOption) (*CreateOneContractMIResp, error) {
	out := new(CreateOneContractMIResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateOneContractMI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateOneContractMI(ctx context.Context, in *UpdateOneContractMIReq, opts ...grpc.CallOption) (*UpdateOneContractMIResp, error) {
	out := new(UpdateOneContractMIResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateOneContractMI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateOneContract(ctx context.Context, in *UpdateOneContractReq, opts ...grpc.CallOption) (*UpdateOneContractResp, error) {
	out := new(UpdateOneContractResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateOneContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateBatchContract(ctx context.Context, in *UpdateBatchContractReq, opts ...grpc.CallOption) (*UpdateBatchContractResp, error) {
	out := new(UpdateBatchContractResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateBatchContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateBatchContract(ctx context.Context, in *CreateBatchContractReq, opts ...grpc.CallOption) (*CreateBatchContractResp, error) {
	out := new(CreateBatchContractResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateBatchContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateContractActive(ctx context.Context, in *UpdateContractActiveReq, opts ...grpc.CallOption) (*UpdateContractActiveResp, error) {
	out := new(UpdateContractActiveResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateContractActive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DeleteOneContract(ctx context.Context, in *DeleteOneContractReq, opts ...grpc.CallOption) (*DeleteOneContractResp, error) {
	out := new(DeleteOneContractResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DeleteOneContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DeleteOneContractMi(ctx context.Context, in *DeleteOneContractMiReq, opts ...grpc.CallOption) (*DeleteOneContractMiResp, error) {
	out := new(DeleteOneContractMiResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DeleteOneContractMi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetContractInfo(ctx context.Context, in *GetContractInfoReq, opts ...grpc.CallOption) (*GetContractInfoResp, error) {
	out := new(GetContractInfoResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetContractInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ContractDetail(ctx context.Context, in *ContractDetailReq, opts ...grpc.CallOption) (*ContractDetailResp, error) {
	out := new(ContractDetailResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ContractDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CheckContractList(ctx context.Context, in *UpCheckContractReq, opts ...grpc.CallOption) (*CheckContractListResp, error) {
	out := new(CheckContractListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CheckContractList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListMedicine(ctx context.Context, in *MedicineListReq, opts ...grpc.CallOption) (*MedicineListResp, error) {
	out := new(MedicineListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListMedicine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) MedicineListForQuery(ctx context.Context, in *MedicineListForQueryReq, opts ...grpc.CallOption) (*MedicineListForQueryResp, error) {
	out := new(MedicineListForQueryResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/MedicineListForQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateMedicine(ctx context.Context, in *CreateMedicineReq, opts ...grpc.CallOption) (*CreateMedicineResp, error) {
	out := new(CreateMedicineResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateMedicine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateBatchMedicine(ctx context.Context, in *CreateBatchMedicineReq, opts ...grpc.CallOption) (*CreateBatchMedicineResp, error) {
	out := new(CreateBatchMedicineResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateBatchMedicine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateMedicine(ctx context.Context, in *UpdateMedicineReq, opts ...grpc.CallOption) (*UpdateMedicineResp, error) {
	out := new(UpdateMedicineResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateMedicine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateMedicineActive(ctx context.Context, in *UpdateMedicineActiveReq, opts ...grpc.CallOption) (*UpdateMedicineActiveResp, error) {
	out := new(UpdateMedicineActiveResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateMedicineActive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DeleteMedicine(ctx context.Context, in *DeleteMedicineReq, opts ...grpc.CallOption) (*DeleteMedicineResp, error) {
	out := new(DeleteMedicineResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DeleteMedicine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) SelectTagByMedicineId(ctx context.Context, in *SelectTagByMedicineIdReq, opts ...grpc.CallOption) (*SelectTagByMedicineIdResp, error) {
	out := new(SelectTagByMedicineIdResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/SelectTagByMedicineId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) SelectInfoByMedicineNames(ctx context.Context, in *SelectInfoByMedicineNamesReq, opts ...grpc.CallOption) (*SelectInfoByMedicineNamesResp, error) {
	out := new(SelectInfoByMedicineNamesResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/SelectInfoByMedicineNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) TagList(ctx context.Context, in *TagListReq, opts ...grpc.CallOption) (*TagListResp, error) {
	out := new(TagListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/TagList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateTag(ctx context.Context, in *CreateTagReq, opts ...grpc.CallOption) (*CreateTagResp, error) {
	out := new(CreateTagResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateTag(ctx context.Context, in *UpdateTagReq, opts ...grpc.CallOption) (*UpdateTagResp, error) {
	out := new(UpdateTagResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DeleteTag(ctx context.Context, in *DeleteTagReq, opts ...grpc.CallOption) (*DeleteTagResp, error) {
	out := new(DeleteTagResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DeleteTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) TagDetailList(ctx context.Context, in *TagDetailListReq, opts ...grpc.CallOption) (*TagDetailListResp, error) {
	out := new(TagDetailListResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/TagDetailList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DeleteTagMedicine(ctx context.Context, in *DeleteTagMedicineReq, opts ...grpc.CallOption) (*DeleteTagMedicineResp, error) {
	out := new(DeleteTagMedicineResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DeleteTagMedicine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateTagMedicine(ctx context.Context, in *CreateTagMedicineReq, opts ...grpc.CallOption) (*CreateTagMedicineResp, error) {
	out := new(CreateTagMedicineResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateTagMedicine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListMi(ctx context.Context, in *ListMiReq, opts ...grpc.CallOption) (*ListMiResp, error) {
	out := new(ListMiResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListMi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CommonMI(ctx context.Context, in *CommonMIReq, opts ...grpc.CallOption) (*CommonMIResp, error) {
	out := new(CommonMIResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CommonMI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateOneMI(ctx context.Context, in *CreateOneMIReq, opts ...grpc.CallOption) (*CreateOneMIResp, error) {
	out := new(CreateOneMIResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateOneMI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateMi(ctx context.Context, in *UpdateMiReq, opts ...grpc.CallOption) (*UpdateMiResp, error) {
	out := new(UpdateMiResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateMi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListCompany(ctx context.Context, in *ListCompanyReq, opts ...grpc.CallOption) (*ListCompanyResp, error) {
	out := new(ListCompanyResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateOneCompany(ctx context.Context, in *CreateOneCompanyReq, opts ...grpc.CallOption) (*CreateOneCompanyResp, error) {
	out := new(CreateOneCompanyResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateOneCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateOneCompany(ctx context.Context, in *UpdateOneCompanyReq, opts ...grpc.CallOption) (*UpdateOneCompanyResp, error) {
	out := new(UpdateOneCompanyResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateOneCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CommonCompany(ctx context.Context, in *CommonCompanyReq, opts ...grpc.CallOption) (*CommonCompanyResp, error) {
	out := new(CommonCompanyResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CommonCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) SelCompanyByNames(ctx context.Context, in *SelCompanyByNamesReq, opts ...grpc.CallOption) (*SelCompanyByNamesResp, error) {
	out := new(SelCompanyByNamesResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/SelCompanyByNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListTpPlanErr(ctx context.Context, in *ListTpPlanErrReq, opts ...grpc.CallOption) (*ListTpPlanErrResp, error) {
	out := new(ListTpPlanErrResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListTpPlanErr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateErrShipmentPlan(ctx context.Context, in *UpdateErrShipmentPlanReq, opts ...grpc.CallOption) (*UpdateErrShipmentPlanResp, error) {
	out := new(UpdateErrShipmentPlanResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateErrShipmentPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListShipmentPlan(ctx context.Context, in *ListShipmentPlanReq, opts ...grpc.CallOption) (*ListShipmentPlanResp, error) {
	out := new(ListShipmentPlanResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListShipmentPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CountShipmentPlan(ctx context.Context, in *CountShipmentPlanReq, opts ...grpc.CallOption) (*CountShipmentPlanResp, error) {
	out := new(CountShipmentPlanResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CountShipmentPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) DetailShipmentOrder(ctx context.Context, in *DetailShipmentOrderReq, opts ...grpc.CallOption) (*DetailShipmentOrderResp, error) {
	out := new(DetailShipmentOrderResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/DetailShipmentOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListShipmentPlanForOrder(ctx context.Context, in *ListShipmentPlanForOrderReq, opts ...grpc.CallOption) (*ListShipmentPlanForOrderResp, error) {
	out := new(ListShipmentPlanForOrderResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListShipmentPlanForOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CreateShipmentOrder(ctx context.Context, in *CreateShipmentOrderReq, opts ...grpc.CallOption) (*CreateShipmentOrderResp, error) {
	out := new(CreateShipmentOrderResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CreateShipmentOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) ListShipmentOrder(ctx context.Context, in *ListShipmentOrderReq, opts ...grpc.CallOption) (*ListShipmentOrderResp, error) {
	out := new(ListShipmentOrderResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/ListShipmentOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) CountShipmentOrder(ctx context.Context, in *CountShipmentOrderReq, opts ...grpc.CallOption) (*CountShipmentOrderResp, error) {
	out := new(CountShipmentOrderResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/CountShipmentOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateShipmentOrder(ctx context.Context, in *UpdateShipmentOrderReq, opts ...grpc.CallOption) (*UpdateShipmentOrderResp, error) {
	out := new(UpdateShipmentOrderResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateShipmentOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetCompanyHash(ctx context.Context, in *GetCompanyHashReq, opts ...grpc.CallOption) (*GetCompanyHashResp, error) {
	out := new(GetCompanyHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetCompanyHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetMiHash(ctx context.Context, in *GetMiHashReq, opts ...grpc.CallOption) (*GetMiHashResp, error) {
	out := new(GetMiHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetMiHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetMedicineHash(ctx context.Context, in *GetMedicineReq, opts ...grpc.CallOption) (*GetMedicineResp, error) {
	out := new(GetMedicineResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetMedicineHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetContractHash(ctx context.Context, in *GetContractHashReq, opts ...grpc.CallOption) (*GetContractHashResp, error) {
	out := new(GetContractHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetContractHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetContractMiHash(ctx context.Context, in *GetContractMiHashReq, opts ...grpc.CallOption) (*GetContractMiHashResp, error) {
	out := new(GetContractMiHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetContractMiHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetConfigHash(ctx context.Context, in *GetConfigHashReq, opts ...grpc.CallOption) (*GetConfigHashResp, error) {
	out := new(GetConfigHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetConfigHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetShipmentPlanHash(ctx context.Context, in *GetShipmentPlanHashReq, opts ...grpc.CallOption) (*GetShipmentPlanHashResp, error) {
	out := new(GetShipmentPlanHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetShipmentPlanHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetShipmentOrderHash(ctx context.Context, in *GetShipmentOrderHashReq, opts ...grpc.CallOption) (*GetShipmentOrderHashResp, error) {
	out := new(GetShipmentOrderHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetShipmentOrderHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetShipmentPayHash(ctx context.Context, in *GetShipmentPayHashReq, opts ...grpc.CallOption) (*GetShipmentPayHashResp, error) {
	out := new(GetShipmentPayHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetShipmentPayHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetShipmentFactoringHash(ctx context.Context, in *GetShipmentFactoringHashReq, opts ...grpc.CallOption) (*GetShipmentFactoringHashResp, error) {
	out := new(GetShipmentFactoringHashResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetShipmentFactoringHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetHashContent(ctx context.Context, in *GetHashContentReq, opts ...grpc.CallOption) (*GetHashContentResp, error) {
	out := new(GetHashContentResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetHashContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetConfig(ctx context.Context, in *GetConfigReq, opts ...grpc.CallOption) (*GetConfigResp, error) {
	out := new(GetConfigResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateConfig(ctx context.Context, in *UpdateConfigReq, opts ...grpc.CallOption) (*UpdateConfigResp, error) {
	out := new(UpdateConfigResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) InsertConfigs(ctx context.Context, in *InsertConfigsReq, opts ...grpc.CallOption) (*InsertConfigsResp, error) {
	out := new(InsertConfigsResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/InsertConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) GetMiSpecialConfig(ctx context.Context, in *GetMiSpecialConfigReq, opts ...grpc.CallOption) (*GetMiSpecialConfigResp, error) {
	out := new(GetMiSpecialConfigResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/GetMiSpecialConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managerServiceClient) UpdateMiSpecialConfig(ctx context.Context, in *UpdateMiSpecialConfigReq, opts ...grpc.CallOption) (*UpdateMiSpecialConfigResp, error) {
	out := new(UpdateMiSpecialConfigResp)
	err := c.cc.Invoke(ctx, "/ManagerService.ManagerService/UpdateMiSpecialConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagerServiceServer is the server API for ManagerService service.
// All implementations must embed UnimplementedManagerServiceServer
// for forward compatibility
type ManagerServiceServer interface {
	//合同相关
	ListContract(context.Context, *ContractListReq) (*ContractListResp, error)
	ListMiContract(context.Context, *ContractMiListReq) (*ContractMiListResp, error)
	CreateOneContractMI(context.Context, *CreateOneContractMIReq) (*CreateOneContractMIResp, error)
	UpdateOneContractMI(context.Context, *UpdateOneContractMIReq) (*UpdateOneContractMIResp, error)
	UpdateOneContract(context.Context, *UpdateOneContractReq) (*UpdateOneContractResp, error)
	UpdateBatchContract(context.Context, *UpdateBatchContractReq) (*UpdateBatchContractResp, error)
	CreateBatchContract(context.Context, *CreateBatchContractReq) (*CreateBatchContractResp, error)
	UpdateContractActive(context.Context, *UpdateContractActiveReq) (*UpdateContractActiveResp, error)
	DeleteOneContract(context.Context, *DeleteOneContractReq) (*DeleteOneContractResp, error)
	DeleteOneContractMi(context.Context, *DeleteOneContractMiReq) (*DeleteOneContractMiResp, error)
	GetContractInfo(context.Context, *GetContractInfoReq) (*GetContractInfoResp, error)
	ContractDetail(context.Context, *ContractDetailReq) (*ContractDetailResp, error)
	CheckContractList(context.Context, *UpCheckContractReq) (*CheckContractListResp, error)
	//药品相关
	ListMedicine(context.Context, *MedicineListReq) (*MedicineListResp, error)
	MedicineListForQuery(context.Context, *MedicineListForQueryReq) (*MedicineListForQueryResp, error)
	CreateMedicine(context.Context, *CreateMedicineReq) (*CreateMedicineResp, error)
	CreateBatchMedicine(context.Context, *CreateBatchMedicineReq) (*CreateBatchMedicineResp, error)
	UpdateMedicine(context.Context, *UpdateMedicineReq) (*UpdateMedicineResp, error)
	UpdateMedicineActive(context.Context, *UpdateMedicineActiveReq) (*UpdateMedicineActiveResp, error)
	DeleteMedicine(context.Context, *DeleteMedicineReq) (*DeleteMedicineResp, error)
	SelectTagByMedicineId(context.Context, *SelectTagByMedicineIdReq) (*SelectTagByMedicineIdResp, error)
	SelectInfoByMedicineNames(context.Context, *SelectInfoByMedicineNamesReq) (*SelectInfoByMedicineNamesResp, error)
	//药品标签相关
	TagList(context.Context, *TagListReq) (*TagListResp, error)
	CreateTag(context.Context, *CreateTagReq) (*CreateTagResp, error)
	UpdateTag(context.Context, *UpdateTagReq) (*UpdateTagResp, error)
	DeleteTag(context.Context, *DeleteTagReq) (*DeleteTagResp, error)
	TagDetailList(context.Context, *TagDetailListReq) (*TagDetailListResp, error)
	DeleteTagMedicine(context.Context, *DeleteTagMedicineReq) (*DeleteTagMedicineResp, error)
	CreateTagMedicine(context.Context, *CreateTagMedicineReq) (*CreateTagMedicineResp, error)
	//医疗机构相关
	ListMi(context.Context, *ListMiReq) (*ListMiResp, error)
	CommonMI(context.Context, *CommonMIReq) (*CommonMIResp, error)
	CreateOneMI(context.Context, *CreateOneMIReq) (*CreateOneMIResp, error)
	UpdateMi(context.Context, *UpdateMiReq) (*UpdateMiResp, error)
	//配送企业相关
	ListCompany(context.Context, *ListCompanyReq) (*ListCompanyResp, error)
	CreateOneCompany(context.Context, *CreateOneCompanyReq) (*CreateOneCompanyResp, error)
	UpdateOneCompany(context.Context, *UpdateOneCompanyReq) (*UpdateOneCompanyResp, error)
	CommonCompany(context.Context, *CommonCompanyReq) (*CommonCompanyResp, error)
	SelCompanyByNames(context.Context, *SelCompanyByNamesReq) (*SelCompanyByNamesResp, error)
	//招采异常订单相关
	ListTpPlanErr(context.Context, *ListTpPlanErrReq) (*ListTpPlanErrResp, error)
	UpdateErrShipmentPlan(context.Context, *UpdateErrShipmentPlanReq) (*UpdateErrShipmentPlanResp, error)
	//招采单(配送)相关
	ListShipmentPlan(context.Context, *ListShipmentPlanReq) (*ListShipmentPlanResp, error)
	CountShipmentPlan(context.Context, *CountShipmentPlanReq) (*CountShipmentPlanResp, error)
	//配送单详情
	DetailShipmentOrder(context.Context, *DetailShipmentOrderReq) (*DetailShipmentOrderResp, error)
	ListShipmentPlanForOrder(context.Context, *ListShipmentPlanForOrderReq) (*ListShipmentPlanForOrderResp, error)
	//配送单创建
	CreateShipmentOrder(context.Context, *CreateShipmentOrderReq) (*CreateShipmentOrderResp, error)
	//配送单列表
	ListShipmentOrder(context.Context, *ListShipmentOrderReq) (*ListShipmentOrderResp, error)
	//配送单表头汇总
	CountShipmentOrder(context.Context, *CountShipmentOrderReq) (*CountShipmentOrderResp, error)
	//配送单修改
	UpdateShipmentOrder(context.Context, *UpdateShipmentOrderReq) (*UpdateShipmentOrderResp, error)
	//hash模块
	GetCompanyHash(context.Context, *GetCompanyHashReq) (*GetCompanyHashResp, error)
	GetMiHash(context.Context, *GetMiHashReq) (*GetMiHashResp, error)
	GetMedicineHash(context.Context, *GetMedicineReq) (*GetMedicineResp, error)
	GetContractHash(context.Context, *GetContractHashReq) (*GetContractHashResp, error)
	GetContractMiHash(context.Context, *GetContractMiHashReq) (*GetContractMiHashResp, error)
	GetConfigHash(context.Context, *GetConfigHashReq) (*GetConfigHashResp, error)
	GetShipmentPlanHash(context.Context, *GetShipmentPlanHashReq) (*GetShipmentPlanHashResp, error)
	GetShipmentOrderHash(context.Context, *GetShipmentOrderHashReq) (*GetShipmentOrderHashResp, error)
	GetShipmentPayHash(context.Context, *GetShipmentPayHashReq) (*GetShipmentPayHashResp, error)
	GetShipmentFactoringHash(context.Context, *GetShipmentFactoringHashReq) (*GetShipmentFactoringHashResp, error)
	//根据哈希查询证书内容
	GetHashContent(context.Context, *GetHashContentReq) (*GetHashContentResp, error)
	//通用配置查询
	GetConfig(context.Context, *GetConfigReq) (*GetConfigResp, error)
	//修改配置
	UpdateConfig(context.Context, *UpdateConfigReq) (*UpdateConfigResp, error)
	//批量插入配置
	InsertConfigs(context.Context, *InsertConfigsReq) (*InsertConfigsResp, error)
	//医院专户额度
	GetMiSpecialConfig(context.Context, *GetMiSpecialConfigReq) (*GetMiSpecialConfigResp, error)
	UpdateMiSpecialConfig(context.Context, *UpdateMiSpecialConfigReq) (*UpdateMiSpecialConfigResp, error)
	mustEmbedUnimplementedManagerServiceServer()
}

// UnimplementedManagerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedManagerServiceServer struct {
}

func (UnimplementedManagerServiceServer) ListContract(context.Context, *ContractListReq) (*ContractListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListContract not implemented")
}
func (UnimplementedManagerServiceServer) ListMiContract(context.Context, *ContractMiListReq) (*ContractMiListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMiContract not implemented")
}
func (UnimplementedManagerServiceServer) CreateOneContractMI(context.Context, *CreateOneContractMIReq) (*CreateOneContractMIResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOneContractMI not implemented")
}
func (UnimplementedManagerServiceServer) UpdateOneContractMI(context.Context, *UpdateOneContractMIReq) (*UpdateOneContractMIResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOneContractMI not implemented")
}
func (UnimplementedManagerServiceServer) UpdateOneContract(context.Context, *UpdateOneContractReq) (*UpdateOneContractResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOneContract not implemented")
}
func (UnimplementedManagerServiceServer) UpdateBatchContract(context.Context, *UpdateBatchContractReq) (*UpdateBatchContractResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBatchContract not implemented")
}
func (UnimplementedManagerServiceServer) CreateBatchContract(context.Context, *CreateBatchContractReq) (*CreateBatchContractResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBatchContract not implemented")
}
func (UnimplementedManagerServiceServer) UpdateContractActive(context.Context, *UpdateContractActiveReq) (*UpdateContractActiveResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContractActive not implemented")
}
func (UnimplementedManagerServiceServer) DeleteOneContract(context.Context, *DeleteOneContractReq) (*DeleteOneContractResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOneContract not implemented")
}
func (UnimplementedManagerServiceServer) DeleteOneContractMi(context.Context, *DeleteOneContractMiReq) (*DeleteOneContractMiResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOneContractMi not implemented")
}
func (UnimplementedManagerServiceServer) GetContractInfo(context.Context, *GetContractInfoReq) (*GetContractInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractInfo not implemented")
}
func (UnimplementedManagerServiceServer) ContractDetail(context.Context, *ContractDetailReq) (*ContractDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContractDetail not implemented")
}
func (UnimplementedManagerServiceServer) CheckContractList(context.Context, *UpCheckContractReq) (*CheckContractListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckContractList not implemented")
}
func (UnimplementedManagerServiceServer) ListMedicine(context.Context, *MedicineListReq) (*MedicineListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMedicine not implemented")
}
func (UnimplementedManagerServiceServer) MedicineListForQuery(context.Context, *MedicineListForQueryReq) (*MedicineListForQueryResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MedicineListForQuery not implemented")
}
func (UnimplementedManagerServiceServer) CreateMedicine(context.Context, *CreateMedicineReq) (*CreateMedicineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMedicine not implemented")
}
func (UnimplementedManagerServiceServer) CreateBatchMedicine(context.Context, *CreateBatchMedicineReq) (*CreateBatchMedicineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBatchMedicine not implemented")
}
func (UnimplementedManagerServiceServer) UpdateMedicine(context.Context, *UpdateMedicineReq) (*UpdateMedicineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMedicine not implemented")
}
func (UnimplementedManagerServiceServer) UpdateMedicineActive(context.Context, *UpdateMedicineActiveReq) (*UpdateMedicineActiveResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMedicineActive not implemented")
}
func (UnimplementedManagerServiceServer) DeleteMedicine(context.Context, *DeleteMedicineReq) (*DeleteMedicineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMedicine not implemented")
}
func (UnimplementedManagerServiceServer) SelectTagByMedicineId(context.Context, *SelectTagByMedicineIdReq) (*SelectTagByMedicineIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectTagByMedicineId not implemented")
}
func (UnimplementedManagerServiceServer) SelectInfoByMedicineNames(context.Context, *SelectInfoByMedicineNamesReq) (*SelectInfoByMedicineNamesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectInfoByMedicineNames not implemented")
}
func (UnimplementedManagerServiceServer) TagList(context.Context, *TagListReq) (*TagListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagList not implemented")
}
func (UnimplementedManagerServiceServer) CreateTag(context.Context, *CreateTagReq) (*CreateTagResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTag not implemented")
}
func (UnimplementedManagerServiceServer) UpdateTag(context.Context, *UpdateTagReq) (*UpdateTagResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTag not implemented")
}
func (UnimplementedManagerServiceServer) DeleteTag(context.Context, *DeleteTagReq) (*DeleteTagResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTag not implemented")
}
func (UnimplementedManagerServiceServer) TagDetailList(context.Context, *TagDetailListReq) (*TagDetailListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TagDetailList not implemented")
}
func (UnimplementedManagerServiceServer) DeleteTagMedicine(context.Context, *DeleteTagMedicineReq) (*DeleteTagMedicineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTagMedicine not implemented")
}
func (UnimplementedManagerServiceServer) CreateTagMedicine(context.Context, *CreateTagMedicineReq) (*CreateTagMedicineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTagMedicine not implemented")
}
func (UnimplementedManagerServiceServer) ListMi(context.Context, *ListMiReq) (*ListMiResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMi not implemented")
}
func (UnimplementedManagerServiceServer) CommonMI(context.Context, *CommonMIReq) (*CommonMIResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommonMI not implemented")
}
func (UnimplementedManagerServiceServer) CreateOneMI(context.Context, *CreateOneMIReq) (*CreateOneMIResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOneMI not implemented")
}
func (UnimplementedManagerServiceServer) UpdateMi(context.Context, *UpdateMiReq) (*UpdateMiResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMi not implemented")
}
func (UnimplementedManagerServiceServer) ListCompany(context.Context, *ListCompanyReq) (*ListCompanyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCompany not implemented")
}
func (UnimplementedManagerServiceServer) CreateOneCompany(context.Context, *CreateOneCompanyReq) (*CreateOneCompanyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOneCompany not implemented")
}
func (UnimplementedManagerServiceServer) UpdateOneCompany(context.Context, *UpdateOneCompanyReq) (*UpdateOneCompanyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOneCompany not implemented")
}
func (UnimplementedManagerServiceServer) CommonCompany(context.Context, *CommonCompanyReq) (*CommonCompanyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommonCompany not implemented")
}
func (UnimplementedManagerServiceServer) SelCompanyByNames(context.Context, *SelCompanyByNamesReq) (*SelCompanyByNamesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelCompanyByNames not implemented")
}
func (UnimplementedManagerServiceServer) ListTpPlanErr(context.Context, *ListTpPlanErrReq) (*ListTpPlanErrResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTpPlanErr not implemented")
}
func (UnimplementedManagerServiceServer) UpdateErrShipmentPlan(context.Context, *UpdateErrShipmentPlanReq) (*UpdateErrShipmentPlanResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateErrShipmentPlan not implemented")
}
func (UnimplementedManagerServiceServer) ListShipmentPlan(context.Context, *ListShipmentPlanReq) (*ListShipmentPlanResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShipmentPlan not implemented")
}
func (UnimplementedManagerServiceServer) CountShipmentPlan(context.Context, *CountShipmentPlanReq) (*CountShipmentPlanResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountShipmentPlan not implemented")
}
func (UnimplementedManagerServiceServer) DetailShipmentOrder(context.Context, *DetailShipmentOrderReq) (*DetailShipmentOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailShipmentOrder not implemented")
}
func (UnimplementedManagerServiceServer) ListShipmentPlanForOrder(context.Context, *ListShipmentPlanForOrderReq) (*ListShipmentPlanForOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShipmentPlanForOrder not implemented")
}
func (UnimplementedManagerServiceServer) CreateShipmentOrder(context.Context, *CreateShipmentOrderReq) (*CreateShipmentOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShipmentOrder not implemented")
}
func (UnimplementedManagerServiceServer) ListShipmentOrder(context.Context, *ListShipmentOrderReq) (*ListShipmentOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShipmentOrder not implemented")
}
func (UnimplementedManagerServiceServer) CountShipmentOrder(context.Context, *CountShipmentOrderReq) (*CountShipmentOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountShipmentOrder not implemented")
}
func (UnimplementedManagerServiceServer) UpdateShipmentOrder(context.Context, *UpdateShipmentOrderReq) (*UpdateShipmentOrderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShipmentOrder not implemented")
}
func (UnimplementedManagerServiceServer) GetCompanyHash(context.Context, *GetCompanyHashReq) (*GetCompanyHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyHash not implemented")
}
func (UnimplementedManagerServiceServer) GetMiHash(context.Context, *GetMiHashReq) (*GetMiHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMiHash not implemented")
}
func (UnimplementedManagerServiceServer) GetMedicineHash(context.Context, *GetMedicineReq) (*GetMedicineResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMedicineHash not implemented")
}
func (UnimplementedManagerServiceServer) GetContractHash(context.Context, *GetContractHashReq) (*GetContractHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractHash not implemented")
}
func (UnimplementedManagerServiceServer) GetContractMiHash(context.Context, *GetContractMiHashReq) (*GetContractMiHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractMiHash not implemented")
}
func (UnimplementedManagerServiceServer) GetConfigHash(context.Context, *GetConfigHashReq) (*GetConfigHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigHash not implemented")
}
func (UnimplementedManagerServiceServer) GetShipmentPlanHash(context.Context, *GetShipmentPlanHashReq) (*GetShipmentPlanHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentPlanHash not implemented")
}
func (UnimplementedManagerServiceServer) GetShipmentOrderHash(context.Context, *GetShipmentOrderHashReq) (*GetShipmentOrderHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentOrderHash not implemented")
}
func (UnimplementedManagerServiceServer) GetShipmentPayHash(context.Context, *GetShipmentPayHashReq) (*GetShipmentPayHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentPayHash not implemented")
}
func (UnimplementedManagerServiceServer) GetShipmentFactoringHash(context.Context, *GetShipmentFactoringHashReq) (*GetShipmentFactoringHashResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentFactoringHash not implemented")
}
func (UnimplementedManagerServiceServer) GetHashContent(context.Context, *GetHashContentReq) (*GetHashContentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHashContent not implemented")
}
func (UnimplementedManagerServiceServer) GetConfig(context.Context, *GetConfigReq) (*GetConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (UnimplementedManagerServiceServer) UpdateConfig(context.Context, *UpdateConfigReq) (*UpdateConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfig not implemented")
}
func (UnimplementedManagerServiceServer) InsertConfigs(context.Context, *InsertConfigsReq) (*InsertConfigsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertConfigs not implemented")
}
func (UnimplementedManagerServiceServer) GetMiSpecialConfig(context.Context, *GetMiSpecialConfigReq) (*GetMiSpecialConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMiSpecialConfig not implemented")
}
func (UnimplementedManagerServiceServer) UpdateMiSpecialConfig(context.Context, *UpdateMiSpecialConfigReq) (*UpdateMiSpecialConfigResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMiSpecialConfig not implemented")
}
func (UnimplementedManagerServiceServer) mustEmbedUnimplementedManagerServiceServer() {}

// UnsafeManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagerServiceServer will
// result in compilation errors.
type UnsafeManagerServiceServer interface {
	mustEmbedUnimplementedManagerServiceServer()
}

func RegisterManagerServiceServer(s grpc.ServiceRegistrar, srv ManagerServiceServer) {
	s.RegisterService(&ManagerService_ServiceDesc, srv)
}

func _ManagerService_ListContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListContract(ctx, req.(*ContractListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListMiContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractMiListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListMiContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListMiContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListMiContract(ctx, req.(*ContractMiListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateOneContractMI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOneContractMIReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateOneContractMI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateOneContractMI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateOneContractMI(ctx, req.(*CreateOneContractMIReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateOneContractMI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOneContractMIReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateOneContractMI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateOneContractMI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateOneContractMI(ctx, req.(*UpdateOneContractMIReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateOneContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOneContractReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateOneContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateOneContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateOneContract(ctx, req.(*UpdateOneContractReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateBatchContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateBatchContractReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateBatchContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateBatchContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateBatchContract(ctx, req.(*UpdateBatchContractReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateBatchContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBatchContractReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateBatchContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateBatchContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateBatchContract(ctx, req.(*CreateBatchContractReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateContractActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContractActiveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateContractActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateContractActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateContractActive(ctx, req.(*UpdateContractActiveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DeleteOneContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOneContractReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DeleteOneContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DeleteOneContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DeleteOneContract(ctx, req.(*DeleteOneContractReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DeleteOneContractMi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteOneContractMiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DeleteOneContractMi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DeleteOneContractMi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DeleteOneContractMi(ctx, req.(*DeleteOneContractMiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetContractInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetContractInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetContractInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetContractInfo(ctx, req.(*GetContractInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ContractDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContractDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ContractDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ContractDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ContractDetail(ctx, req.(*ContractDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CheckContractList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpCheckContractReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CheckContractList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CheckContractList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CheckContractList(ctx, req.(*UpCheckContractReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListMedicine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MedicineListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListMedicine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListMedicine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListMedicine(ctx, req.(*MedicineListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_MedicineListForQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MedicineListForQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).MedicineListForQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/MedicineListForQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).MedicineListForQuery(ctx, req.(*MedicineListForQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateMedicine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMedicineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateMedicine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateMedicine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateMedicine(ctx, req.(*CreateMedicineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateBatchMedicine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBatchMedicineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateBatchMedicine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateBatchMedicine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateBatchMedicine(ctx, req.(*CreateBatchMedicineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateMedicine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMedicineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateMedicine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateMedicine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateMedicine(ctx, req.(*UpdateMedicineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateMedicineActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMedicineActiveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateMedicineActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateMedicineActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateMedicineActive(ctx, req.(*UpdateMedicineActiveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DeleteMedicine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMedicineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DeleteMedicine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DeleteMedicine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DeleteMedicine(ctx, req.(*DeleteMedicineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_SelectTagByMedicineId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectTagByMedicineIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).SelectTagByMedicineId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/SelectTagByMedicineId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).SelectTagByMedicineId(ctx, req.(*SelectTagByMedicineIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_SelectInfoByMedicineNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectInfoByMedicineNamesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).SelectInfoByMedicineNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/SelectInfoByMedicineNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).SelectInfoByMedicineNames(ctx, req.(*SelectInfoByMedicineNamesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_TagList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).TagList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/TagList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).TagList(ctx, req.(*TagListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateTag(ctx, req.(*CreateTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateTag(ctx, req.(*UpdateTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DeleteTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DeleteTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DeleteTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DeleteTag(ctx, req.(*DeleteTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_TagDetailList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TagDetailListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).TagDetailList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/TagDetailList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).TagDetailList(ctx, req.(*TagDetailListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DeleteTagMedicine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTagMedicineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DeleteTagMedicine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DeleteTagMedicine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DeleteTagMedicine(ctx, req.(*DeleteTagMedicineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateTagMedicine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTagMedicineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateTagMedicine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateTagMedicine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateTagMedicine(ctx, req.(*CreateTagMedicineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListMi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListMi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListMi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListMi(ctx, req.(*ListMiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CommonMI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonMIReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CommonMI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CommonMI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CommonMI(ctx, req.(*CommonMIReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateOneMI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOneMIReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateOneMI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateOneMI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateOneMI(ctx, req.(*CreateOneMIReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateMi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMiReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateMi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateMi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateMi(ctx, req.(*UpdateMiReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCompanyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListCompany(ctx, req.(*ListCompanyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateOneCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOneCompanyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateOneCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateOneCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateOneCompany(ctx, req.(*CreateOneCompanyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateOneCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOneCompanyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateOneCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateOneCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateOneCompany(ctx, req.(*UpdateOneCompanyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CommonCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonCompanyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CommonCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CommonCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CommonCompany(ctx, req.(*CommonCompanyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_SelCompanyByNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelCompanyByNamesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).SelCompanyByNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/SelCompanyByNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).SelCompanyByNames(ctx, req.(*SelCompanyByNamesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListTpPlanErr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTpPlanErrReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListTpPlanErr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListTpPlanErr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListTpPlanErr(ctx, req.(*ListTpPlanErrReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateErrShipmentPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateErrShipmentPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateErrShipmentPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateErrShipmentPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateErrShipmentPlan(ctx, req.(*UpdateErrShipmentPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListShipmentPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShipmentPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListShipmentPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListShipmentPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListShipmentPlan(ctx, req.(*ListShipmentPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CountShipmentPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountShipmentPlanReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CountShipmentPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CountShipmentPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CountShipmentPlan(ctx, req.(*CountShipmentPlanReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_DetailShipmentOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailShipmentOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).DetailShipmentOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/DetailShipmentOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).DetailShipmentOrder(ctx, req.(*DetailShipmentOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListShipmentPlanForOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShipmentPlanForOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListShipmentPlanForOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListShipmentPlanForOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListShipmentPlanForOrder(ctx, req.(*ListShipmentPlanForOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CreateShipmentOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShipmentOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CreateShipmentOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CreateShipmentOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CreateShipmentOrder(ctx, req.(*CreateShipmentOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_ListShipmentOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShipmentOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).ListShipmentOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/ListShipmentOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).ListShipmentOrder(ctx, req.(*ListShipmentOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_CountShipmentOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountShipmentOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).CountShipmentOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/CountShipmentOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).CountShipmentOrder(ctx, req.(*CountShipmentOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateShipmentOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShipmentOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateShipmentOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateShipmentOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateShipmentOrder(ctx, req.(*UpdateShipmentOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetCompanyHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompanyHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetCompanyHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetCompanyHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetCompanyHash(ctx, req.(*GetCompanyHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetMiHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMiHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetMiHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetMiHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetMiHash(ctx, req.(*GetMiHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetMedicineHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMedicineReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetMedicineHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetMedicineHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetMedicineHash(ctx, req.(*GetMedicineReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetContractHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetContractHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetContractHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetContractHash(ctx, req.(*GetContractHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetContractMiHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetContractMiHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetContractMiHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetContractMiHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetContractMiHash(ctx, req.(*GetContractMiHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetConfigHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetConfigHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetConfigHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetConfigHash(ctx, req.(*GetConfigHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetShipmentPlanHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipmentPlanHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetShipmentPlanHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetShipmentPlanHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetShipmentPlanHash(ctx, req.(*GetShipmentPlanHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetShipmentOrderHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipmentOrderHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetShipmentOrderHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetShipmentOrderHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetShipmentOrderHash(ctx, req.(*GetShipmentOrderHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetShipmentPayHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipmentPayHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetShipmentPayHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetShipmentPayHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetShipmentPayHash(ctx, req.(*GetShipmentPayHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetShipmentFactoringHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipmentFactoringHashReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetShipmentFactoringHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetShipmentFactoringHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetShipmentFactoringHash(ctx, req.(*GetShipmentFactoringHashReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetHashContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHashContentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetHashContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetHashContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetHashContent(ctx, req.(*GetHashContentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetConfig(ctx, req.(*GetConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateConfig(ctx, req.(*UpdateConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_InsertConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertConfigsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).InsertConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/InsertConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).InsertConfigs(ctx, req.(*InsertConfigsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_GetMiSpecialConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMiSpecialConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).GetMiSpecialConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/GetMiSpecialConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).GetMiSpecialConfig(ctx, req.(*GetMiSpecialConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagerService_UpdateMiSpecialConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMiSpecialConfigReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagerServiceServer).UpdateMiSpecialConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagerService.ManagerService/UpdateMiSpecialConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagerServiceServer).UpdateMiSpecialConfig(ctx, req.(*UpdateMiSpecialConfigReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ManagerService_ServiceDesc is the grpc.ServiceDesc for ManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ManagerService.ManagerService",
	HandlerType: (*ManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListContract",
			Handler:    _ManagerService_ListContract_Handler,
		},
		{
			MethodName: "ListMiContract",
			Handler:    _ManagerService_ListMiContract_Handler,
		},
		{
			MethodName: "CreateOneContractMI",
			Handler:    _ManagerService_CreateOneContractMI_Handler,
		},
		{
			MethodName: "UpdateOneContractMI",
			Handler:    _ManagerService_UpdateOneContractMI_Handler,
		},
		{
			MethodName: "UpdateOneContract",
			Handler:    _ManagerService_UpdateOneContract_Handler,
		},
		{
			MethodName: "UpdateBatchContract",
			Handler:    _ManagerService_UpdateBatchContract_Handler,
		},
		{
			MethodName: "CreateBatchContract",
			Handler:    _ManagerService_CreateBatchContract_Handler,
		},
		{
			MethodName: "UpdateContractActive",
			Handler:    _ManagerService_UpdateContractActive_Handler,
		},
		{
			MethodName: "DeleteOneContract",
			Handler:    _ManagerService_DeleteOneContract_Handler,
		},
		{
			MethodName: "DeleteOneContractMi",
			Handler:    _ManagerService_DeleteOneContractMi_Handler,
		},
		{
			MethodName: "GetContractInfo",
			Handler:    _ManagerService_GetContractInfo_Handler,
		},
		{
			MethodName: "ContractDetail",
			Handler:    _ManagerService_ContractDetail_Handler,
		},
		{
			MethodName: "CheckContractList",
			Handler:    _ManagerService_CheckContractList_Handler,
		},
		{
			MethodName: "ListMedicine",
			Handler:    _ManagerService_ListMedicine_Handler,
		},
		{
			MethodName: "MedicineListForQuery",
			Handler:    _ManagerService_MedicineListForQuery_Handler,
		},
		{
			MethodName: "CreateMedicine",
			Handler:    _ManagerService_CreateMedicine_Handler,
		},
		{
			MethodName: "CreateBatchMedicine",
			Handler:    _ManagerService_CreateBatchMedicine_Handler,
		},
		{
			MethodName: "UpdateMedicine",
			Handler:    _ManagerService_UpdateMedicine_Handler,
		},
		{
			MethodName: "UpdateMedicineActive",
			Handler:    _ManagerService_UpdateMedicineActive_Handler,
		},
		{
			MethodName: "DeleteMedicine",
			Handler:    _ManagerService_DeleteMedicine_Handler,
		},
		{
			MethodName: "SelectTagByMedicineId",
			Handler:    _ManagerService_SelectTagByMedicineId_Handler,
		},
		{
			MethodName: "SelectInfoByMedicineNames",
			Handler:    _ManagerService_SelectInfoByMedicineNames_Handler,
		},
		{
			MethodName: "TagList",
			Handler:    _ManagerService_TagList_Handler,
		},
		{
			MethodName: "CreateTag",
			Handler:    _ManagerService_CreateTag_Handler,
		},
		{
			MethodName: "UpdateTag",
			Handler:    _ManagerService_UpdateTag_Handler,
		},
		{
			MethodName: "DeleteTag",
			Handler:    _ManagerService_DeleteTag_Handler,
		},
		{
			MethodName: "TagDetailList",
			Handler:    _ManagerService_TagDetailList_Handler,
		},
		{
			MethodName: "DeleteTagMedicine",
			Handler:    _ManagerService_DeleteTagMedicine_Handler,
		},
		{
			MethodName: "CreateTagMedicine",
			Handler:    _ManagerService_CreateTagMedicine_Handler,
		},
		{
			MethodName: "ListMi",
			Handler:    _ManagerService_ListMi_Handler,
		},
		{
			MethodName: "CommonMI",
			Handler:    _ManagerService_CommonMI_Handler,
		},
		{
			MethodName: "CreateOneMI",
			Handler:    _ManagerService_CreateOneMI_Handler,
		},
		{
			MethodName: "UpdateMi",
			Handler:    _ManagerService_UpdateMi_Handler,
		},
		{
			MethodName: "ListCompany",
			Handler:    _ManagerService_ListCompany_Handler,
		},
		{
			MethodName: "CreateOneCompany",
			Handler:    _ManagerService_CreateOneCompany_Handler,
		},
		{
			MethodName: "UpdateOneCompany",
			Handler:    _ManagerService_UpdateOneCompany_Handler,
		},
		{
			MethodName: "CommonCompany",
			Handler:    _ManagerService_CommonCompany_Handler,
		},
		{
			MethodName: "SelCompanyByNames",
			Handler:    _ManagerService_SelCompanyByNames_Handler,
		},
		{
			MethodName: "ListTpPlanErr",
			Handler:    _ManagerService_ListTpPlanErr_Handler,
		},
		{
			MethodName: "UpdateErrShipmentPlan",
			Handler:    _ManagerService_UpdateErrShipmentPlan_Handler,
		},
		{
			MethodName: "ListShipmentPlan",
			Handler:    _ManagerService_ListShipmentPlan_Handler,
		},
		{
			MethodName: "CountShipmentPlan",
			Handler:    _ManagerService_CountShipmentPlan_Handler,
		},
		{
			MethodName: "DetailShipmentOrder",
			Handler:    _ManagerService_DetailShipmentOrder_Handler,
		},
		{
			MethodName: "ListShipmentPlanForOrder",
			Handler:    _ManagerService_ListShipmentPlanForOrder_Handler,
		},
		{
			MethodName: "CreateShipmentOrder",
			Handler:    _ManagerService_CreateShipmentOrder_Handler,
		},
		{
			MethodName: "ListShipmentOrder",
			Handler:    _ManagerService_ListShipmentOrder_Handler,
		},
		{
			MethodName: "CountShipmentOrder",
			Handler:    _ManagerService_CountShipmentOrder_Handler,
		},
		{
			MethodName: "UpdateShipmentOrder",
			Handler:    _ManagerService_UpdateShipmentOrder_Handler,
		},
		{
			MethodName: "GetCompanyHash",
			Handler:    _ManagerService_GetCompanyHash_Handler,
		},
		{
			MethodName: "GetMiHash",
			Handler:    _ManagerService_GetMiHash_Handler,
		},
		{
			MethodName: "GetMedicineHash",
			Handler:    _ManagerService_GetMedicineHash_Handler,
		},
		{
			MethodName: "GetContractHash",
			Handler:    _ManagerService_GetContractHash_Handler,
		},
		{
			MethodName: "GetContractMiHash",
			Handler:    _ManagerService_GetContractMiHash_Handler,
		},
		{
			MethodName: "GetConfigHash",
			Handler:    _ManagerService_GetConfigHash_Handler,
		},
		{
			MethodName: "GetShipmentPlanHash",
			Handler:    _ManagerService_GetShipmentPlanHash_Handler,
		},
		{
			MethodName: "GetShipmentOrderHash",
			Handler:    _ManagerService_GetShipmentOrderHash_Handler,
		},
		{
			MethodName: "GetShipmentPayHash",
			Handler:    _ManagerService_GetShipmentPayHash_Handler,
		},
		{
			MethodName: "GetShipmentFactoringHash",
			Handler:    _ManagerService_GetShipmentFactoringHash_Handler,
		},
		{
			MethodName: "GetHashContent",
			Handler:    _ManagerService_GetHashContent_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _ManagerService_GetConfig_Handler,
		},
		{
			MethodName: "UpdateConfig",
			Handler:    _ManagerService_UpdateConfig_Handler,
		},
		{
			MethodName: "InsertConfigs",
			Handler:    _ManagerService_InsertConfigs_Handler,
		},
		{
			MethodName: "GetMiSpecialConfig",
			Handler:    _ManagerService_GetMiSpecialConfig_Handler,
		},
		{
			MethodName: "UpdateMiSpecialConfig",
			Handler:    _ManagerService_UpdateMiSpecialConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ManagerService.proto",
}
